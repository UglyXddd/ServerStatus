from pathlib import Path

import aiogram
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import datetime
import excel
import userInterface
import subprocess
import pandas as pd
import logging
import send_email
import asyncio


# —Ç–æ –µ—Å—Ç—å –∫–æ–≥–¥–∞ IP –ø–∞–¥–∞–µ—Ç, –ø—Ä–æ–≥–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

def main():
    global dp, bot
    is_updated = False
    while is_updated == False:
        try:

            with open('ApiBot.txt', 'r') as file:
                bot = Bot(token=file.readline())  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
                dp = Dispatcher(bot)
                print()
                array_of_pinged_ip_tg = []
                array_of_pinged_ip_mail = []
                logging.basicConfig(filename='app.log', filemode='w+', format='%(name)s - %(levelname)s - %(message)s')
                is_updated = True

            def search_variable(value: str) -> str:
                for i in range(len(userInterface.global_data)):
                    if userInterface.global_data[i][excel.HEADERS[i][1]].isin([value]).any():
                        return excel.HEADERS[i][0]

            @dp.message_handler(commands=['activate'])  # –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "/activate"
            async def send_to_group_command(message: types.Message):
                global dp, bot
                sms_tg = ""

                sms_mail = ""
                file_path = "chatID.txt"  # –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≥—Ä—É–ø–ø–∞ –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                with open(file_path, "w") as file:
                    file.write(str(message.chat.id))  # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª

                await bot.send_message(chat_id=message.chat.id,
                                       text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ‚úÖ‚úÖ")  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞—á–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ID
                logging.warning('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã')

                await send_note()
                asyncio.run(send_note())

            async def send_note():
                while True:
                    file_path = "chatID.txt"  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω–∏—Ç—Å—è ID –≥—Ä—É–ø–ø—ã
                    with open(file_path, "r") as file:
                        value = file.read()  # —Å—á–∏—Ç—ã–≤–∞–µ—Ç ID –≥—Ä—É–ø–ø—ã –∏–∑ —Ñ–∞–π–ª–∞ –≤—ã—à–µ
                    # —á—Ç–µ–Ω–∏–µ csv —Ñ–∞–π–ª–∞
                    try:
                        to_note_list = pd.read_csv('notification_data.csv').values.tolist()
                    except:
                        to_note_list = []
                    sms_tg = ""
                    sms_mail = ''
                    for i, item in enumerate(to_note_list):
                        output = subprocess.run(["ping", "-n", "1", item[1]], capture_output=True, text=True,
                                                creationflags=subprocess.CREATE_NO_WINDOW)
                        if output.returncode == 0:
                            try:
                                array_of_pinged_ip_tg.pop(array_of_pinged_ip_tg.index(item[1]))
                                array_of_pinged_ip_mail.pop(array_of_pinged_ip_mail.index(item[1]))
                                logging.warning(f'{item[1]} –≤ —Å–µ—Ç–∏')
                            except:
                                pass
                        else:
                            logging.warning(
                                f'{item[1]} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–µ—Ç–∏ –≤ {str(datetime.datetime.now().replace(microsecond=0))}')
                            # –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª—è–ª –ª–∏ —É–∂–µ
                            if str(item[1]) not in array_of_pinged_ip_tg:

                                if item[2] == '‚òë':  # —É–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ –≤ —Ç–≥
                                    sms_tg += f"üö®üö® {search_variable(item[1])} '{str(item[0])} —Å IP   {str(item[1])}  –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–µ—Ç–∏ –≤  {str(datetime.datetime.now().replace(microsecond=0))}  üö®üö® \n"

                                array_of_pinged_ip_tg.append(
                                    str(to_note_list[i][1]))  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö
                            if str(item[1]) not in array_of_pinged_ip_mail:
                                if item[3] == '‚òë':  # —É–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ –≤ –º—ã–ª–µ
                                    # # #
                                    sms_mail += f"üö®üö® {search_variable(item[1])} '{str(item[0])} —Å IP   {str(item[1])}  –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–µ—Ç–∏ –≤  {str(datetime.datetime.now().replace(microsecond=0))}  üö®üö® \n"
                                array_of_pinged_ip_mail.append(str(to_note_list[i][1]))
                        if is_updated == False:
                            break
                        print(str(i) + " –ø–æ —Å—á–µ—Ç—É ip –ø—Ä–æ–≤–µ—Ä–µ–Ω", len(userInterface.global_data))

                    if sms_tg != '':
                        if len(sms_tg) > 4096:
                            for x in range(0, len(sms_tg), 4096):
                                await bot.send_message(value, sms_tg[x:x + 4096])
                        else:
                            await bot.send_message(value, sms_tg)
                    if sms_mail != '':
                        send_email.sendEmail("mail.betaren.ru", 25, 'monit@betagran.ru', 'Yc8sB2#vdSW1mN@5%ffR',
                                             'monit@betagran.ru', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!', sms_mail)
                    #
                    if sms_tg != "":
                        sms_tg = ""
                    if sms_mail != "":
                        sms_mail = ""
                await asyncio.sleep(1)

            executor.start_polling(dp, skip_updates=False)  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–∑ –º–µ–π–Ω–∞
        except:
            pass

